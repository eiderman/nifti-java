package edu.washington.biostr.sig.volume.surface;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.vecmath.Point3f;
import javax.vecmath.Vector3f;

/**
 * Provide various lookup tables that speed up MarchingCubes greatly.
 * <br>
 * <br>
 *   .4___ .5<br>
 *  /|    /|<br>
 *.7_|_ .6 |<br>
 *|  .0_|_ .1<br>
 *| /   | /<br>
 *.3___ .2<br>
 *<br>
 * @author Eider Moore
 * @version 1.0
 */
public class StaticMCTable {

    /**
     * For each edge have a lookup with {v1, v2}
     */
    public final static char[][] EDGES =
            {
        {0, 1},
        {1, 2},
        {3, 2},
        {0, 3},
        {4, 5},
        {5, 6},
        {7, 6},
        {4, 7},
        {0, 4},
        {1, 5},
        {3, 7},
        {2, 6},};
    /**
     * Whether or not the given case has one surface or more.
     */
    public static final boolean[] SIMPLE = {
        true, true, true, true, true, false, true, true, true, true, false, true, true, true, true, true,
        true, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true,
        true, false, true, true, false, false, true, true, false, false, false, true, false, false, true,
        true, true, true, true, true, false, false, true, true, false, true, false, true, false, false, false,
        true, true, false, false, false, true, false, true, true, false, false, false, false, true, true, true,
        true, false, false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, false, true, false, true, true, true, false, true, true, false, false, false, false, true, false,
        true, true, true, true, true, true, true, false, true, true, false, false, false, false, false, false, false,
        true, true, false, false, false, false, false, false, false, true, true, false, true, true, true, true,
        true, true, true, false, true, false, false, false, false, true, true, false, true, true, true, false, true,
        false, false, false, false, false, false, false, false, false, false, false, false, false, false, false,
        false, true, true, true, true, false, false, false, false, true, true, false, true, false, false, false,
        true, true, false, false, false, true, false, true, false, true, true, false, false, true, true, true, true,
        true, true, false, false, true, false, false, false, true, true, false, false, true, true, false, true, true,
        false, true, false, true, false, true, false, true, false, false, false, true, false, true, true, true, true,
        true, true, true, false, true, true, true, true, false, true, true, true, true, true
    };
    /**
     * The approximate area for the triangles in each case.  The area is based on the edges crossing at .5.
     */
    public static final double[] AREAS = {0.0,
        0.21650635094610965, 0.21650635094610965, 0.7071067811865476,
        0.21650635094610965, 0.4330127018922193, 0.7071067811865476, 1.149519052838329, 0.21650635094610965,
        0.7071067811865476, 0.4330127018922193, 1.149519052838329, 0.7071067811865476, 1.149519052838329,
        1.149519052838329, 1.0, 0.21650635094610965, 0.7071067811865476, 0.4330127018922193, 1.149519052838329,
        0.4330127018922193, 0.9236131321326573, 0.9236131321326573, 1.573132184970986, 0.4330127018922193,
        1.149519052838329, 0.649519052838329, 1.2990381056766578, 0.9236131321326573, 1.573132184970986,
        1.3660254037844386, 1.149519052838329, 0.21650635094610965, 0.4330127018922193, 0.7071067811865476,
        1.149519052838329, 0.4330127018922193, 0.649519052838329, 1.149519052838329, 1.2990381056766578,
        0.4330127018922193, 0.9236131321326573, 0.9236131321326573, 1.573132184970986, 0.9236131321326573,
        1.3660254037844386, 1.573132184970986, 1.149519052838329, 0.7071067811865476, 1.149519052838329,
        1.149519052838329, 1.0, 0.9236131321326573, 1.3660254037844386, 1.573132184970986, 1.149519052838329,
        0.9236131321326573, 1.573132184970986, 1.3660254037844386, 1.149519052838329, 1.4142135623730951,
        1.965624789436539, 1.965624789436539, 0.7071067811865476, 0.21650635094610965, 0.4330127018922193,
        0.4330127018922193, 0.9236131321326573, 0.7071067811865476, 0.9236131321326573, 1.149519052838329,
        1.573132184970986, 0.4330127018922193, 0.9236131321326573, 0.649519052838329, 1.3660254037844386,
        1.149519052838329, 1.573132184970986, 1.2990381056766578, 1.149519052838329, 0.4330127018922193,
        0.9236131321326573, 0.649519052838329, 1.3660254037844386, 0.9236131321326573, 1.4142135623730951,
        1.3660254037844386, 1.965624789436539, 0.649519052838329, 1.3660254037844386, 0.8660254037844386,
        1.5155444566227674, 1.3660254037844386, 1.965624789436539, 1.5155444566227674, 1.299038105676658,
        0.7071067811865476, 0.9236131321326573, 1.149519052838329, 1.573132184970986, 1.149519052838329,
        1.3660254037844386, 1.0, 1.149519052838329, 0.9236131321326573, 1.4142135623730951, 1.3660254037844386,
        1.965624789436539, 1.573132184970986, 1.965624789436539, 1.149519052838329, 0.7071067811865476,
        1.149519052838329, 1.573132184970986, 1.2990381056766578, 1.149519052838329, 1.573132184970986,
        1.965624789436539, 1.149519052838329, 0.7071067811865476, 1.3660254037844386, 1.965624789436539,
        1.5155444566227674, 1.299038105676658, 1.965624789436539, 0.4330127018922193, 1.299038105676658,
        0.21650635094610965, 0.21650635094610965, 0.4330127018922193, 0.4330127018922193, 0.9236131321326573,
        0.4330127018922193, 0.649519052838329, 0.9236131321326573, 1.3660254037844386, 0.7071067811865476,
        1.149519052838329, 0.9236131321326573, 1.573132184970986, 1.149519052838329, 1.2990381056766578,
        1.573132184970986, 1.149519052838329, 0.7071067811865476, 1.149519052838329, 0.9236131321326573,
        1.573132184970986, 0.9236131321326573, 1.3660254037844386, 1.4142135623730951, 1.965624789436539,
        1.149519052838329, 1.0, 1.3660254037844386, 1.149519052838329, 1.573132184970986, 1.149519052838329,
        1.965624789436539, 0.7071067811865476, 0.4330127018922193, 0.649519052838329, 0.9236131321326573,
        1.3660254037844386, 0.649519052838329, 0.8660254037844386, 1.3660254037844386, 1.5155444566227674,
        0.9236131321326573, 1.3660254037844386, 1.4142135623730951, 1.965624789436539, 1.3660254037844386,
        1.5155444566227674, 1.965624789436539, 1.299038105676658, 1.149519052838329, 1.2990381056766578,
        1.573132184970986, 1.149519052838329, 1.3660254037844386, 1.5155444566227674, 1.965624789436539,
        1.299038105676658, 1.573132184970986, 1.149519052838329, 1.965624789436539, 0.7071067811865476,
        1.965624789436539, 1.299038105676658, 0.4330127018922193, 0.21650635094610965, 0.7071067811865476,
        0.9236131321326573, 0.9236131321326573, 1.4142135623730951, 1.149519052838329, 1.3660254037844386,
        1.573132184970986, 1.965624789436539, 1.149519052838329, 1.573132184970986, 1.3660254037844386,
        1.965624789436539, 1.0, 1.149519052838329, 1.149519052838329, 0.7071067811865476, 1.149519052838329,
        1.573132184970986, 1.3660254037844386, 1.965624789436539, 1.573132184970986, 1.965624789436539,
        1.965624789436539, 0.4330127018922193, 1.2990381056766578, 1.149519052838329, 1.5155444566227674,
        1.299038105676658, 1.149519052838329, 0.7071067811865476, 1.299038105676658, 0.21650635094610965,
        1.149519052838329, 1.3660254037844386, 1.573132184970986, 1.965624789436539, 1.2990381056766578,
        1.5155444566227674, 1.149519052838329, 1.299038105676658, 1.573132184970986, 1.965624789436539,
        1.965624789436539, 0.4330127018922193, 1.149519052838329, 1.299038105676658, 0.7071067811865476,
        0.21650635094610965, 1.0, 1.149519052838329, 1.149519052838329, 0.7071067811865476, 1.149519052838329,
        1.299038105676658, 0.7071067811865476, 0.21650635094610965, 1.149519052838329, 0.7071067811865476,
        1.299038105676658, 0.21650635094610965, 0.7071067811865476, 0.21650635094610965, 0.21650635094610965, 0.0
    };
    /**
     * The direction from each vertex to the outer edge.
     */
    public static final int[][] DIRECTIONS = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
        {-1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
        {0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
        {1, -1, -1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
        {-1, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
        {0, 0, -1, 1, 0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 1, 0},
        {1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
        {-1, 1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 0},
        {0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0},
        {0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 1, 1},
        {1, -1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1},
        {-1, 0, 0, -1, 0, 0, 0, 0, 0, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
        {0, 0, 0, 0, 1, 0, 0, 1, -1, 0, 0, 0},
        {1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0},
        {-1, 1, 0, 0, 1, 0, 0, 1, -1, 1, 0, 0},
        {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
        {0, -1, -1, 0, 1, 0, 0, 1, -1, 0, 0, 1},
        {1, -1, -1, 1, 1, 0, 0, 1, 0, 0, 0, 1},
        {-1, 0, -1, 0, 1, 0, 0, 1, -1, 1, 0, 1},
        {0, 0, -1, 1, 1, 0, 0, 1, 0, 1, 0, 1},
        {0, 0, 1, -1, 1, 0, 0, 1, -1, 0, 1, 0},
        {1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0},
        {-1, 1, 1, -1, 1, 0, 0, 1, -1, 1, 1, 0},
        {0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0},
        {0, -1, 0, -1, 1, 0, 0, 1, -1, 0, 1, 1},
        {1, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1},
        {-1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1, 1},
        {0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1},
        {0, 0, 0, 0, -1, 1, 0, 0, 0, -1, 0, 0},
        {1, 0, 0, 1, -1, 1, 0, 0, 1, -1, 0, 0},
        {-1, 1, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0},
        {0, 1, 0, 1, -1, 1, 0, 0, 1, 0, 0, 0},
        {0, -1, -1, 0, -1, 1, 0, 0, 0, -1, 0, 1},
        {1, -1, -1, 1, -1, 1, 0, 0, 1, -1, 0, 1},
        {-1, 0, -1, 0, -1, 1, 0, 0, 0, 0, 0, 1},
        {0, 0, -1, 1, -1, 1, 0, 0, 1, 0, 0, 1},
        {0, 0, 1, -1, -1, 1, 0, 0, 0, -1, 1, 0},
        {1, 0, 1, 0, -1, 1, 0, 0, 1, -1, 1, 0},
        {-1, 1, 1, -1, -1, 1, 0, 0, 0, 0, 1, 0},
        {0, 1, 1, 0, -1, 1, 0, 0, 1, 0, 1, 0},
        {0, -1, 0, -1, -1, 1, 0, 0, 0, -1, 1, 1},
        {1, -1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1},
        {-1, 0, 0, -1, -1, 1, 0, 0, 0, 0, 1, 1},
        {0, 0, 0, 0, -1, 1, 0, 0, 1, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 0, 1, -1, -1, 0, 0},
        {1, 0, 0, 1, 0, 1, 0, 1, 0, -1, 0, 0},
        {-1, 1, 0, 0, 0, 1, 0, 1, -1, 0, 0, 0},
        {0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
        {0, -1, -1, 0, 0, 1, 0, 1, -1, -1, 0, 1},
        {1, -1, -1, 1, 0, 1, 0, 1, 0, -1, 0, 1},
        {-1, 0, -1, 0, 0, 1, 0, 1, -1, 0, 0, 1},
        {0, 0, -1, 1, 0, 1, 0, 1, 0, 0, 0, 1},
        {0, 0, 1, -1, 0, 1, 0, 1, -1, -1, 1, 0},
        {1, 0, 1, 0, 0, 1, 0, 1, 0, -1, 1, 0},
        {-1, 1, 1, -1, 0, 1, 0, 1, -1, 0, 1, 0},
        {0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
        {0, -1, 0, -1, 0, 1, 0, 1, -1, -1, 1, 1},
        {1, -1, 0, 0, 0, 1, 0, 1, 0, -1, 1, 1},
        {-1, 0, 0, -1, 0, 1, 0, 1, -1, 0, 1, 1},
        {0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1},
        {0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, -1},
        {1, 0, 0, 1, 0, -1, -1, 0, 1, 0, 0, -1},
        {-1, 1, 0, 0, 0, -1, -1, 0, 0, 1, 0, -1},
        {0, 1, 0, 1, 0, -1, -1, 0, 1, 1, 0, -1},
        {0, -1, -1, 0, 0, -1, -1, 0, 0, 0, 0, 0},
        {1, -1, -1, 1, 0, -1, -1, 0, 1, 0, 0, 0},
        {-1, 0, -1, 0, 0, -1, -1, 0, 0, 1, 0, 0},
        {0, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, 0},
        {0, 0, 1, -1, 0, -1, -1, 0, 0, 0, 1, -1},
        {1, 0, 1, 0, 0, -1, -1, 0, 1, 0, 1, -1},
        {-1, 1, 1, -1, 0, -1, -1, 0, 0, 1, 1, -1},
        {0, 1, 1, 0, 0, -1, -1, 0, 1, 1, 1, -1},
        {0, -1, 0, -1, 0, -1, -1, 0, 0, 0, 1, 0},
        {1, -1, 0, 0, 0, -1, -1, 0, 1, 0, 1, 0},
        {-1, 0, 0, -1, 0, -1, -1, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, -1, -1, 0, 1, 1, 1, 0},
        {0, 0, 0, 0, 1, -1, -1, 1, -1, 0, 0, -1},
        {1, 0, 0, 1, 1, -1, -1, 1, 0, 0, 0, -1},
        {-1, 1, 0, 0, 1, -1, -1, 1, -1, 1, 0, -1},
        {0, 1, 0, 1, 1, -1, -1, 1, 0, 1, 0, -1},
        {0, -1, -1, 0, 1, -1, -1, 1, -1, 0, 0, 0},
        {1, -1, -1, 1, 1, -1, -1, 1, 0, 0, 0, 0},
        {-1, 0, -1, 0, 1, -1, -1, 1, -1, 1, 0, 0},
        {0, 0, -1, 1, 1, -1, -1, 1, 0, 1, 0, 0},
        {0, 0, 1, -1, 1, -1, -1, 1, -1, 0, 1, -1},
        {1, 0, 1, 0, 1, -1, -1, 1, 0, 0, 1, -1},
        {-1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1},
        {0, 1, 1, 0, 1, -1, -1, 1, 0, 1, 1, -1},
        {0, -1, 0, -1, 1, -1, -1, 1, -1, 0, 1, 0},
        {1, -1, 0, 0, 1, -1, -1, 1, 0, 0, 1, 0},
        {-1, 0, 0, -1, 1, -1, -1, 1, -1, 1, 1, 0},
        {0, 0, 0, 0, 1, -1, -1, 1, 0, 1, 1, 0},
        {0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, -1},
        {1, 0, 0, 1, -1, 0, -1, 0, 1, -1, 0, -1},
        {-1, 1, 0, 0, -1, 0, -1, 0, 0, 0, 0, -1},
        {0, 1, 0, 1, -1, 0, -1, 0, 1, 0, 0, -1},
        {0, -1, -1, 0, -1, 0, -1, 0, 0, -1, 0, 0},
        {1, -1, -1, 1, -1, 0, -1, 0, 1, -1, 0, 0},
        {-1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0, 0},
        {0, 0, -1, 1, -1, 0, -1, 0, 1, 0, 0, 0},
        {0, 0, 1, -1, -1, 0, -1, 0, 0, -1, 1, -1},
        {1, 0, 1, 0, -1, 0, -1, 0, 1, -1, 1, -1},
        {-1, 1, 1, -1, -1, 0, -1, 0, 0, 0, 1, -1},
        {0, 1, 1, 0, -1, 0, -1, 0, 1, 0, 1, -1},
        {0, -1, 0, -1, -1, 0, -1, 0, 0, -1, 1, 0},
        {1, -1, 0, 0, -1, 0, -1, 0, 1, -1, 1, 0},
        {-1, 0, 0, -1, -1, 0, -1, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, -1, 0, -1, 0, 1, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, -1, 1, -1, -1, 0, -1},
        {1, 0, 0, 1, 0, 0, -1, 1, 0, -1, 0, -1},
        {-1, 1, 0, 0, 0, 0, -1, 1, -1, 0, 0, -1},
        {0, 1, 0, 1, 0, 0, -1, 1, 0, 0, 0, -1},
        {0, -1, -1, 0, 0, 0, -1, 1, -1, -1, 0, 0},
        {1, -1, -1, 1, 0, 0, -1, 1, 0, -1, 0, 0},
        {-1, 0, -1, 0, 0, 0, -1, 1, -1, 0, 0, 0},
        {0, 0, -1, 1, 0, 0, -1, 1, 0, 0, 0, 0},
        {0, 0, 1, -1, 0, 0, -1, 1, -1, -1, 1, -1},
        {1, 0, 1, 0, 0, 0, -1, 1, 0, -1, 1, -1},
        {-1, 1, 1, -1, 0, 0, -1, 1, -1, 0, 1, -1},
        {0, 1, 1, 0, 0, 0, -1, 1, 0, 0, 1, -1},
        {0, -1, 0, -1, 0, 0, -1, 1, -1, -1, 1, 0},
        {1, -1, 0, 0, 0, 0, -1, 1, 0, -1, 1, 0},
        {-1, 0, 0, -1, 0, 0, -1, 1, -1, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 0, 1, -1, 0, 0, -1, 0},
        {1, 0, 0, 1, 0, 0, 1, -1, 1, 0, -1, 0},
        {-1, 1, 0, 0, 0, 0, 1, -1, 0, 1, -1, 0},
        {0, 1, 0, 1, 0, 0, 1, -1, 1, 1, -1, 0},
        {0, -1, -1, 0, 0, 0, 1, -1, 0, 0, -1, 1},
        {1, -1, -1, 1, 0, 0, 1, -1, 1, 0, -1, 1},
        {-1, 0, -1, 0, 0, 0, 1, -1, 0, 1, -1, 1},
        {0, 0, -1, 1, 0, 0, 1, -1, 1, 1, -1, 1},
        {0, 0, 1, -1, 0, 0, 1, -1, 0, 0, 0, 0},
        {1, 0, 1, 0, 0, 0, 1, -1, 1, 0, 0, 0},
        {-1, 1, 1, -1, 0, 0, 1, -1, 0, 1, 0, 0},
        {0, 1, 1, 0, 0, 0, 1, -1, 1, 1, 0, 0},
        {0, -1, 0, -1, 0, 0, 1, -1, 0, 0, 0, 1},
        {1, -1, 0, 0, 0, 0, 1, -1, 1, 0, 0, 1},
        {-1, 0, 0, -1, 0, 0, 1, -1, 0, 1, 0, 1},
        {0, 0, 0, 0, 0, 0, 1, -1, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 0, 1, 0, -1, 0, -1, 0},
        {1, 0, 0, 1, 1, 0, 1, 0, 0, 0, -1, 0},
        {-1, 1, 0, 0, 1, 0, 1, 0, -1, 1, -1, 0},
        {0, 1, 0, 1, 1, 0, 1, 0, 0, 1, -1, 0},
        {0, -1, -1, 0, 1, 0, 1, 0, -1, 0, -1, 1},
        {1, -1, -1, 1, 1, 0, 1, 0, 0, 0, -1, 1},
        {-1, 0, -1, 0, 1, 0, 1, 0, -1, 1, -1, 1},
        {0, 0, -1, 1, 1, 0, 1, 0, 0, 1, -1, 1},
        {0, 0, 1, -1, 1, 0, 1, 0, -1, 0, 0, 0},
        {1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
        {-1, 1, 1, -1, 1, 0, 1, 0, -1, 1, 0, 0},
        {0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0},
        {0, -1, 0, -1, 1, 0, 1, 0, -1, 0, 0, 1},
        {1, -1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1},
        {-1, 0, 0, -1, 1, 0, 1, 0, -1, 1, 0, 1},
        {0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
        {0, 0, 0, 0, -1, 1, 1, -1, 0, -1, -1, 0},
        {1, 0, 0, 1, -1, 1, 1, -1, 1, -1, -1, 0},
        {-1, 1, 0, 0, -1, 1, 1, -1, 0, 0, -1, 0},
        {0, 1, 0, 1, -1, 1, 1, -1, 1, 0, -1, 0},
        {0, -1, -1, 0, -1, 1, 1, -1, 0, -1, -1, 1},
        {1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1},
        {-1, 0, -1, 0, -1, 1, 1, -1, 0, 0, -1, 1},
        {0, 0, -1, 1, -1, 1, 1, -1, 1, 0, -1, 1},
        {0, 0, 1, -1, -1, 1, 1, -1, 0, -1, 0, 0},
        {1, 0, 1, 0, -1, 1, 1, -1, 1, -1, 0, 0},
        {-1, 1, 1, -1, -1, 1, 1, -1, 0, 0, 0, 0},
        {0, 1, 1, 0, -1, 1, 1, -1, 1, 0, 0, 0},
        {0, -1, 0, -1, -1, 1, 1, -1, 0, -1, 0, 1},
        {1, -1, 0, 0, -1, 1, 1, -1, 1, -1, 0, 1},
        {-1, 0, 0, -1, -1, 1, 1, -1, 0, 0, 0, 1},
        {0, 0, 0, 0, -1, 1, 1, -1, 1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 1, 0, -1, -1, -1, 0},
        {1, 0, 0, 1, 0, 1, 1, 0, 0, -1, -1, 0},
        {-1, 1, 0, 0, 0, 1, 1, 0, -1, 0, -1, 0},
        {0, 1, 0, 1, 0, 1, 1, 0, 0, 0, -1, 0},
        {0, -1, -1, 0, 0, 1, 1, 0, -1, -1, -1, 1},
        {1, -1, -1, 1, 0, 1, 1, 0, 0, -1, -1, 1},
        {-1, 0, -1, 0, 0, 1, 1, 0, -1, 0, -1, 1},
        {0, 0, -1, 1, 0, 1, 1, 0, 0, 0, -1, 1},
        {0, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 0},
        {1, 0, 1, 0, 0, 1, 1, 0, 0, -1, 0, 0},
        {-1, 1, 1, -1, 0, 1, 1, 0, -1, 0, 0, 0},
        {0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0},
        {0, -1, 0, -1, 0, 1, 1, 0, -1, -1, 0, 1},
        {1, -1, 0, 0, 0, 1, 1, 0, 0, -1, 0, 1},
        {-1, 0, 0, -1, 0, 1, 1, 0, -1, 0, 0, 1},
        {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, -1},
        {1, 0, 0, 1, 0, -1, 0, -1, 1, 0, -1, -1},
        {-1, 1, 0, 0, 0, -1, 0, -1, 0, 1, -1, -1},
        {0, 1, 0, 1, 0, -1, 0, -1, 1, 1, -1, -1},
        {0, -1, -1, 0, 0, -1, 0, -1, 0, 0, -1, 0},
        {1, -1, -1, 1, 0, -1, 0, -1, 1, 0, -1, 0},
        {-1, 0, -1, 0, 0, -1, 0, -1, 0, 1, -1, 0},
        {0, 0, -1, 1, 0, -1, 0, -1, 1, 1, -1, 0},
        {0, 0, 1, -1, 0, -1, 0, -1, 0, 0, 0, -1},
        {1, 0, 1, 0, 0, -1, 0, -1, 1, 0, 0, -1},
        {-1, 1, 1, -1, 0, -1, 0, -1, 0, 1, 0, -1},
        {0, 1, 1, 0, 0, -1, 0, -1, 1, 1, 0, -1},
        {0, -1, 0, -1, 0, -1, 0, -1, 0, 0, 0, 0},
        {1, -1, 0, 0, 0, -1, 0, -1, 1, 0, 0, 0},
        {-1, 0, 0, -1, 0, -1, 0, -1, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, -1, 0, -1, 1, 1, 0, 0},
        {0, 0, 0, 0, 1, -1, 0, 0, -1, 0, -1, -1},
        {1, 0, 0, 1, 1, -1, 0, 0, 0, 0, -1, -1},
        {-1, 1, 0, 0, 1, -1, 0, 0, -1, 1, -1, -1},
        {0, 1, 0, 1, 1, -1, 0, 0, 0, 1, -1, -1},
        {0, -1, -1, 0, 1, -1, 0, 0, -1, 0, -1, 0},
        {1, -1, -1, 1, 1, -1, 0, 0, 0, 0, -1, 0},
        {-1, 0, -1, 0, 1, -1, 0, 0, -1, 1, -1, 0},
        {0, 0, -1, 1, 1, -1, 0, 0, 0, 1, -1, 0},
        {0, 0, 1, -1, 1, -1, 0, 0, -1, 0, 0, -1},
        {1, 0, 1, 0, 1, -1, 0, 0, 0, 0, 0, -1},
        {-1, 1, 1, -1, 1, -1, 0, 0, -1, 1, 0, -1},
        {0, 1, 1, 0, 1, -1, 0, 0, 0, 1, 0, -1},
        {0, -1, 0, -1, 1, -1, 0, 0, -1, 0, 0, 0},
        {1, -1, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0},
        {-1, 0, 0, -1, 1, -1, 0, 0, -1, 1, 0, 0},
        {0, 0, 0, 0, 1, -1, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, -1, 0, 0, -1, 0, -1, -1, -1},
        {1, 0, 0, 1, -1, 0, 0, -1, 1, -1, -1, -1},
        {-1, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, -1},
        {0, 1, 0, 1, -1, 0, 0, -1, 1, 0, -1, -1},
        {0, -1, -1, 0, -1, 0, 0, -1, 0, -1, -1, 0},
        {1, -1, -1, 1, -1, 0, 0, -1, 1, -1, -1, 0},
        {-1, 0, -1, 0, -1, 0, 0, -1, 0, 0, -1, 0},
        {0, 0, -1, 1, -1, 0, 0, -1, 1, 0, -1, 0},
        {0, 0, 1, -1, -1, 0, 0, -1, 0, -1, 0, -1},
        {1, 0, 1, 0, -1, 0, 0, -1, 1, -1, 0, -1},
        {-1, 1, 1, -1, -1, 0, 0, -1, 0, 0, 0, -1},
        {0, 1, 1, 0, -1, 0, 0, -1, 1, 0, 0, -1},
        {0, -1, 0, -1, -1, 0, 0, -1, 0, -1, 0, 0},
        {1, -1, 0, 0, -1, 0, 0, -1, 1, -1, 0, 0},
        {-1, 0, 0, -1, -1, 0, 0, -1, 0, 0, 0, 0},
        {0, 0, 0, 0, -1, 0, 0, -1, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1},
        {1, 0, 0, 1, 0, 0, 0, 0, 0, -1, -1, -1},
        {-1, 1, 0, 0, 0, 0, 0, 0, -1, 0, -1, -1},
        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, -1, -1},
        {0, -1, -1, 0, 0, 0, 0, 0, -1, -1, -1, 0},
        {1, -1, -1, 1, 0, 0, 0, 0, 0, -1, -1, 0},
        {-1, 0, -1, 0, 0, 0, 0, 0, -1, 0, -1, 0},
        {0, 0, -1, 1, 0, 0, 0, 0, 0, 0, -1, 0},
        {0, 0, 1, -1, 0, 0, 0, 0, -1, -1, 0, -1},
        {1, 0, 1, 0, 0, 0, 0, 0, 0, -1, 0, -1},
        {-1, 1, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1},
        {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1},
        {0, -1, 0, -1, 0, 0, 0, 0, -1, -1, 0, 0},
        {1, -1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0},
        {-1, 0, 0, -1, 0, 0, 0, 0, -1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},};
    /**
     * I don't know why I have two triTables, but this one seems preferred.
     */
    public final static char[][] triTableA =
            {
        {},
        {
    0, 8, 3
},
        {
    0, 1, 9
},
        {
    1, 8, 3, 9, 8, 1
},
        {
    1, 2, 11
},
        {
    0, 8, 3, 1, 2, 11
},
        {
    9, 2, 11, 0, 2, 9
},
        {
    2, 8, 3, 2, 11, 8, 11, 9, 8
},
        {
    3, 10, 2
},
        {
    0, 10, 2, 8, 10, 0
},
        {
    1, 9, 0, 2, 3, 10
},
        {
    1, 10, 2, 1, 9, 10, 9, 8, 10
},
        {
    3, 11, 1, 10, 11, 3
},
        {
    0, 11, 1, 0, 8, 11, 8, 10, 11
},
        {
    3, 9, 0, 3, 10, 9, 10, 11, 9
},
        {
    9, 8, 11, 11, 8, 10
},
        {
    4, 7, 8
},
        {
    4, 3, 0, 7, 3, 4
},
        {
    0, 1, 9, 8, 4, 7
},
        {
    4, 1, 9, 4, 7, 1, 7, 3, 1
},
        {
    1, 2, 11, 8, 4, 7
},
        {
    3, 4, 7, 3, 0, 4, 1, 2, 11
},
        {
    9, 2, 11, 9, 0, 2, 8, 4, 7
},
        {
    2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4
},
        {
    8, 4, 7, 3, 10, 2
},
        {
    10, 4, 7, 10, 2, 4, 2, 0, 4
},
        {
    9, 0, 1, 8, 4, 7, 2, 3, 10
},
        {
    4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1
},
        {
    3, 11, 1, 3, 10, 11, 7, 8, 4
},
        {
    1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4
},
        {
    4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3
},
        {
    4, 7, 10, 4, 10, 9, 9, 10, 11
},
        {
    9, 5, 4
},
        {
    9, 5, 4, 0, 8, 3
},
        {
    0, 5, 4, 1, 5, 0
},
        {
    8, 5, 4, 8, 3, 5, 3, 1, 5
},
        {
    1, 2, 11, 9, 5, 4
},
        {
    3, 0, 8, 1, 2, 11, 4, 9, 5
},
        {
    5, 2, 11, 5, 4, 2, 4, 0, 2
},
        {
    2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8
},
        {
    9, 5, 4, 2, 3, 10
},
        {
    0, 10, 2, 0, 8, 10, 4, 9, 5
},
        {
    0, 5, 4, 0, 1, 5, 2, 3, 10
},
        {
    2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5
},
        {
    11, 3, 10, 11, 1, 3, 9, 5, 4
},
        {
    4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11
},
        {
    5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3
},
        {
    5, 4, 8, 5, 8, 11, 11, 8, 10
},
        {
    9, 7, 8, 5, 7, 9
},
        {
    9, 3, 0, 9, 5, 3, 5, 7, 3
},
        {
    0, 7, 8, 0, 1, 7, 1, 5, 7
},
        {
    1, 5, 3, 3, 5, 7
},
        {
    9, 7, 8, 9, 5, 7, 11, 1, 2
},
        {
    11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3
},
        {
    8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2
},
        {
    2, 11, 5, 2, 5, 3, 3, 5, 7
},
        {
    7, 9, 5, 7, 8, 9, 3, 10, 2
},
        {
    9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10
},
        {
    2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7
},
        {
    10, 2, 1, 10, 1, 7, 7, 1, 5
},
        {
    9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10
},
        {
    5, 7, 0, 5, 0, 9, 7, 10, 0, 1, 0, 11, 10, 11, 0
},
        {
    10, 11, 0, 10, 0, 3, 11, 5, 0, 8, 0, 7, 5, 7, 0
},
        {
    10, 11, 5, 7, 10, 5
},
        {
    11, 6, 5
},
        {
    0, 8, 3, 5, 11, 6
},
        {
    9, 0, 1, 5, 11, 6
},
        {
    1, 8, 3, 1, 9, 8, 5, 11, 6
},
        {
    1, 6, 5, 2, 6, 1
},
        {
    1, 6, 5, 1, 2, 6, 3, 0, 8
},
        {
    9, 6, 5, 9, 0, 6, 0, 2, 6
},
        {
    5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8
},
        {
    2, 3, 10, 11, 6, 5
},
        {
    10, 0, 8, 10, 2, 0, 11, 6, 5
},
        {
    0, 1, 9, 2, 3, 10, 5, 11, 6
},
        {
    5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10
},
        {
    6, 3, 10, 6, 5, 3, 5, 1, 3
},
        {
    0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6
},
        {
    3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9
},
        {
    6, 5, 9, 6, 9, 10, 10, 9, 8
},
        {
    5, 11, 6, 4, 7, 8
},
        {
    4, 3, 0, 4, 7, 3, 6, 5, 11
},
        {
    1, 9, 0, 5, 11, 6, 8, 4, 7
},
        {
    11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4
},
        {
    6, 1, 2, 6, 5, 1, 4, 7, 8
},
        {
    1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7
},
        {
    8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6
},
        {
    7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9
},
        {
    3, 10, 2, 7, 8, 4, 11, 6, 5
},
        {
    5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10
},
        {
    0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6
},
        {
    9, 2, 1, 9, 10, 2, 9, 4, 10, 7, 10, 4, 5, 11, 6
},
        {
    8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6
},
        {
    5, 1, 10, 5, 10, 6, 1, 0, 10, 7, 10, 4, 0, 4, 10
},
        {
    0, 5, 9, 0, 6, 5, 0, 3, 6, 10, 6, 3, 8, 4, 7
},
        {
    6, 5, 9, 6, 9, 10, 4, 7, 9, 7, 10, 9
},
        {
    11, 4, 9, 6, 4, 11
},
        {
    4, 11, 6, 4, 9, 11, 0, 8, 3
},
        {
    11, 0, 1, 11, 6, 0, 6, 4, 0
},
        {
    8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11
},
        {
    1, 4, 9, 1, 2, 4, 2, 6, 4
},
        {
    3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4
},
        {
    0, 2, 4, 4, 2, 6
},
        {
    8, 3, 2, 8, 2, 4, 4, 2, 6
},
        {
    11, 4, 9, 11, 6, 4, 10, 2, 3
},
        {
    0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6
},
        {
    3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11
},
        {
    6, 4, 1, 6, 1, 11, 4, 8, 1, 2, 1, 10, 8, 10, 1
},
        {
    9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3
},
        {
    8, 10, 1, 8, 1, 0, 10, 6, 1, 9, 1, 4, 6, 4, 1
},
        {
    3, 10, 6, 3, 6, 0, 0, 6, 4
},
        {
    6, 4, 8, 10, 6, 8
},
        {
    7, 11, 6, 7, 8, 11, 8, 9, 11
},
        {
    0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11
},
        {
    11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0
},
        {
    11, 6, 7, 11, 7, 1, 1, 7, 3
},
        {
    1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7
},
        {
    2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9
},
        {
    7, 8, 0, 7, 0, 6, 6, 0, 2
},
        {
    7, 3, 2, 6, 7, 2
},
        {
    2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7
},
        {
    2, 0, 7, 2, 7, 10, 0, 9, 7, 6, 7, 11, 9, 11, 7
},
        {
    1, 8, 0, 1, 7, 8, 1, 11, 7, 6, 7, 11, 2, 3, 10
},
        {
    10, 2, 1, 10, 1, 7, 11, 6, 1, 6, 7, 1
},
        {
    8, 9, 6, 8, 6, 7, 9, 1, 6, 10, 6, 3, 1, 3, 6
},
        {
    0, 9, 1, 10, 6, 7
},
        {
    7, 8, 0, 7, 0, 6, 3, 10, 0, 10, 6, 0
},
        {
    7, 10, 6
},
        {
    7, 6, 10
},
        {
    3, 0, 8, 10, 7, 6
},
        {
    0, 1, 9, 10, 7, 6
},
        {
    8, 1, 9, 8, 3, 1, 10, 7, 6
},
        {
    11, 1, 2, 6, 10, 7
},
        {
    1, 2, 11, 3, 0, 8, 6, 10, 7
},
        {
    2, 9, 0, 2, 11, 9, 6, 10, 7
},
        {
    6, 10, 7, 2, 11, 3, 11, 8, 3, 11, 9, 8
},
        {
    7, 2, 3, 6, 2, 7
},
        {
    7, 0, 8, 7, 6, 0, 6, 2, 0
},
        {
    2, 7, 6, 2, 3, 7, 0, 1, 9
},
        {
    1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6
},
        {
    11, 7, 6, 11, 1, 7, 1, 3, 7
},
        {
    11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8
},
        {
    0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7
},
        {
    7, 6, 11, 7, 11, 8, 8, 11, 9
},
        {
    6, 8, 4, 10, 8, 6
},
        {
    3, 6, 10, 3, 0, 6, 0, 4, 6
},
        {
    8, 6, 10, 8, 4, 6, 9, 0, 1
},
        {
    9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6
},
        {
    6, 8, 4, 6, 10, 8, 2, 11, 1
},
        {
    1, 2, 11, 3, 0, 10, 0, 6, 10, 0, 4, 6
},
        {
    4, 10, 8, 4, 6, 10, 0, 2, 9, 2, 11, 9
},
        {
    11, 9, 3, 11, 3, 2, 9, 4, 3, 10, 3, 6, 4, 6, 3
},
        {
    8, 2, 3, 8, 4, 2, 4, 6, 2
},
        {
    0, 4, 2, 4, 6, 2
},
        {
    1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8
},
        {
    1, 9, 4, 1, 4, 2, 2, 4, 6
},
        {
    8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1
},
        {
    11, 1, 0, 11, 0, 6, 6, 0, 4
},
        {
    4, 6, 3, 4, 3, 8, 6, 11, 3, 0, 3, 9, 11, 9, 3
},
        {
    11, 9, 4, 6, 11, 4
},
        {
    4, 9, 5, 7, 6, 10
},
        {
    0, 8, 3, 4, 9, 5, 10, 7, 6
},
        {
    5, 0, 1, 5, 4, 0, 7, 6, 10
},
        {
    10, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5
},
        {
    9, 5, 4, 11, 1, 2, 7, 6, 10
},
        {
    6, 10, 7, 1, 2, 11, 0, 8, 3, 4, 9, 5
},
        {
    7, 6, 10, 5, 4, 11, 4, 2, 11, 4, 0, 2
},
        {
    3, 4, 8, 3, 5, 4, 3, 2, 5, 11, 5, 2, 10, 7, 6
},
        {
    7, 2, 3, 7, 6, 2, 5, 4, 9
},
        {
    9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7
},
        {
    3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0
},
        {
    6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8
},
        {
    9, 5, 4, 11, 1, 6, 1, 7, 6, 1, 3, 7
},
        {
    1, 6, 11, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4
},
        {
    4, 0, 11, 4, 11, 5, 0, 3, 11, 6, 11, 7, 3, 7, 11
},
        {
    7, 6, 11, 7, 11, 8, 5, 4, 11, 4, 8, 11
},
        {
    6, 9, 5, 6, 10, 9, 10, 8, 9
},
        {
    3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5
},
        {
    0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10
},
        {
    6, 10, 3, 6, 3, 5, 5, 3, 1
},
        {
    1, 2, 11, 9, 5, 10, 9, 10, 8, 10, 5, 6
},
        {
    0, 10, 3, 0, 6, 10, 0, 9, 6, 5, 6, 9, 1, 2, 11
},
        {
    10, 8, 5, 10, 5, 6, 8, 0, 5, 11, 5, 2, 0, 2, 5
},
        {
    6, 10, 3, 6, 3, 5, 2, 11, 3, 11, 5, 3
},
        {
    5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2
},
        {
    9, 5, 6, 9, 6, 0, 0, 6, 2
},
        {
    1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8
},
        {
    1, 5, 6, 2, 1, 6
},
        {
    1, 3, 6, 1, 6, 11, 3, 8, 6, 5, 6, 9, 8, 9, 6
},
        {
    11, 1, 0, 11, 0, 6, 9, 5, 0, 5, 6, 0
},
        {
    0, 3, 8, 5, 6, 11
},
        {
    11, 5, 6
},
        {
    10, 5, 11, 7, 5, 10
},
        {
    10, 5, 11, 10, 7, 5, 8, 3, 0
},
        {
    5, 10, 7, 5, 11, 10, 1, 9, 0
},
        {
    11, 7, 5, 11, 10, 7, 9, 8, 1, 8, 3, 1
},
        {
    10, 1, 2, 10, 7, 1, 7, 5, 1
},
        {
    0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 10
},
        {
    9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7
},
        {
    7, 5, 2, 7, 2, 10, 5, 9, 2, 3, 2, 8, 9, 8, 2
},
        {
    2, 5, 11, 2, 3, 5, 3, 7, 5
},
        {
    8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5
},
        {
    9, 0, 1, 5, 11, 3, 5, 3, 7, 3, 11, 2
},
        {
    9, 8, 2, 9, 2, 1, 8, 7, 2, 11, 2, 5, 7, 5, 2
},
        {
    1, 3, 5, 3, 7, 5
},
        {
    0, 8, 7, 0, 7, 1, 1, 7, 5
},
        {
    9, 0, 3, 9, 3, 5, 5, 3, 7
},
        {
    9, 8, 7, 5, 9, 7
},
        {
    5, 8, 4, 5, 11, 8, 11, 10, 8
},
        {
    5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0
},
        {
    0, 1, 9, 8, 4, 11, 8, 11, 10, 11, 4, 5
},
        {
    11, 10, 4, 11, 4, 5, 10, 3, 4, 9, 4, 1, 3, 1, 4
},
        {
    2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8
},
        {
    0, 4, 10, 0, 10, 3, 4, 5, 10, 2, 10, 1, 5, 1, 10
},
        {
    0, 2, 5, 0, 5, 9, 2, 10, 5, 4, 5, 8, 10, 8, 5
},
        {
    9, 4, 5, 2, 10, 3
},
        {
    2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4
},
        {
    5, 11, 2, 5, 2, 4, 4, 2, 0
},
        {
    3, 11, 2, 3, 5, 11, 3, 8, 5, 4, 5, 8, 0, 1, 9
},
        {
    5, 11, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2
},
        {
    8, 4, 5, 8, 5, 3, 3, 5, 1
},
        {
    0, 4, 5, 1, 0, 5
},
        {
    8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5
},
        {
    9, 4, 5
},
        {
    4, 10, 7, 4, 9, 10, 9, 11, 10
},
        {
    0, 8, 3, 4, 9, 7, 9, 10, 7, 9, 11, 10
},
        {
    1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10
},
        {
    3, 1, 4, 3, 4, 8, 1, 11, 4, 7, 4, 10, 11, 10, 4
},
        {
    4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2
},
        {
    9, 7, 4, 9, 10, 7, 9, 1, 10, 2, 10, 1, 0, 8, 3
},
        {
    10, 7, 4, 10, 4, 2, 2, 4, 0
},
        {
    10, 7, 4, 10, 4, 2, 8, 3, 4, 3, 2, 4
},
        {
    2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9
},
        {
    9, 11, 7, 9, 7, 4, 11, 2, 7, 8, 7, 0, 2, 0, 7
},
        {
    3, 7, 11, 3, 11, 2, 7, 4, 11, 1, 11, 0, 4, 0, 11
},
        {
    1, 11, 2, 8, 7, 4
},
        {
    4, 9, 1, 4, 1, 7, 7, 1, 3
},
        {
    4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1
},
        {
    4, 0, 3, 7, 4, 3
},
        {
    4, 8, 7
},
        {
    9, 11, 8, 11, 10, 8
},
        {
    3, 0, 9, 3, 9, 10, 10, 9, 11
},
        {
    0, 1, 11, 0, 11, 8, 8, 11, 10
},
        {
    3, 1, 11, 10, 3, 11
},
        {
    1, 2, 10, 1, 10, 9, 9, 10, 8
},
        {
    3, 0, 9, 3, 9, 10, 1, 2, 9, 2, 10, 9
},
        {
    0, 2, 10, 8, 0, 10
},
        {
    3, 2, 10
},
        {
    2, 3, 8, 2, 8, 11, 11, 8, 9
},
        {
    9, 11, 2, 0, 9, 2
},
        {
    2, 3, 8, 2, 8, 11, 0, 1, 8, 1, 11, 8
},
        {
    1, 11, 2
},
        {
    1, 3, 8, 9, 1, 8
},
        {
    0, 9, 1
},
        {
    0, 3, 8
},
        {}
    };

    /*
     * This table is a list of which edges are used to make triangles for each
     * cube. Inside of each table entry is an index into the edge array. from the
     * base it goes counterclockwise and then it continues along the top and
     * finally along the edges that connect the base to the top. The indexes of
     * the table itself are the sum of 2^(vertex) for all included vertices. This
     * table is based off of code written by Cory Bloyd. I took it from code
     * written by Josh Grant. I did not see a license attached to the code so I
     * assume that I am allowed to use it so long as I attribute it correctly.
     * The original code can be downloaded at:
     * http://ww2.cs.fsu.edu/~grant/projects/mcubes/ if there is a problem with
     * me using this code, please contact the structural informatics group at the
     * University of Washington.
     */
    public final static char[][] triTable =
            {
        {},
        {
    0, 8, 3
},
        {
    0, 1, 9
},
        {
    1, 8, 3, 9, 8, 1
},
        {
    1, 2, 11
},
        {
    0, 8, 3, 1, 2, 11
},
        {
    9, 2, 11, 0, 2, 9
},
        {
    2, 8, 3, 2, 11, 8, 11, 9, 8
},
        {
    3, 10, 2
},
        {
    0, 10, 2, 8, 10, 0
},
        {
    1, 9, 0, 2, 3, 10
},
        {
    1, 10, 2, 1, 9, 10, 9, 8, 10
},
        {
    3, 11, 1, 10, 11, 3
},
        {
    0, 11, 1, 0, 8, 11, 8, 10, 11
},
        {
    3, 9, 0, 3, 10, 9, 10, 11, 9
},
        {
    9, 8, 11, 11, 8, 10
},
        {
    4, 7, 8
},
        {
    4, 3, 0, 7, 3, 4
},
        {
    0, 1, 9, 8, 4, 7
},
        {
    4, 1, 9, 4, 7, 1, 7, 3, 1
},
        {
    1, 2, 11, 8, 4, 7
},
        {
    3, 4, 7, 3, 0, 4, 1, 2, 11
},
        {
    9, 2, 11, 9, 0, 2, 8, 4, 7
},
        {
    2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4
},
        {
    8, 4, 7, 3, 10, 2
},
        {
    10, 4, 7, 10, 2, 4, 2, 0, 4
},
        {
    9, 0, 1, 8, 4, 7, 2, 3, 10
},
        {
    4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1
},
        {
    3, 11, 1, 3, 10, 11, 7, 8, 4
},
        {
    1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4
},
        {
    4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3
},
        {
    4, 7, 10, 4, 10, 9, 9, 10, 11
},
        {
    9, 5, 4
},
        {
    9, 5, 4, 0, 8, 3
},
        {
    0, 5, 4, 1, 5, 0
},
        {
    8, 5, 4, 8, 3, 5, 3, 1, 5
},
        {
    1, 2, 11, 9, 5, 4
},
        {
    3, 0, 8, 1, 2, 11, 4, 9, 5
},
        {
    5, 2, 11, 5, 4, 2, 4, 0, 2
},
        {
    2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8
},
        {
    9, 5, 4, 2, 3, 10
},
        {
    0, 10, 2, 0, 8, 10, 4, 9, 5
},
        {
    0, 5, 4, 0, 1, 5, 2, 3, 10
},
        {
    2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5
},
        {
    11, 3, 10, 11, 1, 3, 9, 5, 4
},
        {
    4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11
},
        {
    5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3
},
        {
    5, 4, 8, 5, 8, 11, 11, 8, 10
},
        {
    9, 7, 8, 5, 7, 9
},
        {
    9, 3, 0, 9, 5, 3, 5, 7, 3
},
        {
    0, 7, 8, 0, 1, 7, 1, 5, 7
},
        {
    1, 5, 3, 3, 5, 7
},
        {
    9, 7, 8, 9, 5, 7, 11, 1, 2
},
        {
    11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3
},
        {
    8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2
},
        {
    2, 11, 5, 2, 5, 3, 3, 5, 7
},
        {
    7, 9, 5, 7, 8, 9, 3, 10, 2
},
        {
    9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10
},
        {
    2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7
},
        {
    10, 2, 1, 10, 1, 7, 7, 1, 5
},
        {
    9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10
},
        {
    5, 7, 10, 5, 10, 11, 1, 0, 9
},
        {
    10, 11, 5, 10, 5, 7, 8, 0, 3
},
        {
    10, 11, 5, 7, 10, 5
},
        {
    11, 6, 5
},
        {
    0, 8, 3, 5, 11, 6
},
        {
    9, 0, 1, 5, 11, 6
},
        {
    1, 8, 3, 1, 9, 8, 5, 11, 6
},
        {
    1, 6, 5, 2, 6, 1
},
        {
    1, 6, 5, 1, 2, 6, 3, 0, 8
},
        {
    9, 6, 5, 9, 0, 6, 0, 2, 6
},
        {
    5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8
},
        {
    2, 3, 10, 11, 6, 5
},
        {
    10, 0, 8, 10, 2, 0, 11, 6, 5
},
        {
    0, 1, 9, 2, 3, 10, 5, 11, 6
},
        {
    5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10
},
        {
    6, 3, 10, 6, 5, 3, 5, 1, 3
},
        {
    0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6
},
        {
    3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9
},
        {
    6, 5, 9, 6, 9, 10, 10, 9, 8
},
        {
    5, 11, 6, 4, 7, 8
},
        {
    4, 3, 0, 4, 7, 3, 6, 5, 11
},
        {
    1, 9, 0, 5, 11, 6, 8, 4, 7
},
        {
    11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4
},
        {
    6, 1, 2, 6, 5, 1, 4, 7, 8
},
        {
    1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7
},
        {
    8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6
},
        {
    7, 3, 2, 7, 2, 6, 5, 9, 4
},
        {
    3, 10, 2, 7, 8, 4, 11, 6, 5
},
        {
    5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10
},
        {
    0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6
},
        {
    9, 4, 5, 11, 2, 1, 7, 10, 6
},
        {
    8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6
},
        {
    5, 1, 0, 5, 0, 4, 7, 10, 6
},
        {
    0, 3, 8, 4, 5, 9, 10, 6, 7
},
        {
    4, 5, 9, 7, 10, 6
},
        {
    11, 4, 9, 6, 4, 11
},
        {
    4, 11, 6, 4, 9, 11, 0, 8, 3
},
        {
    11, 0, 1, 11, 6, 0, 6, 4, 0
},
        {
    8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11
},
        {
    1, 4, 9, 1, 2, 4, 2, 6, 4
},
        {
    3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4
},
        {
    0, 2, 4, 4, 2, 6
},
        {
    8, 3, 2, 8, 2, 4, 4, 2, 6
},
        {
    11, 4, 9, 11, 6, 4, 10, 2, 3
},
        {
    0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6
},
        {
    3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11
},
        {
    6, 4, 8, 6, 8, 10, 2, 1, 11
},
        {
    9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3
},
        {
    8, 10, 6, 8, 6, 4, 9, 1, 0
},
        {
    3, 10, 6, 3, 6, 0, 0, 6, 4
},
        {
    6, 4, 8, 10, 6, 8
},
        {
    7, 11, 6, 7, 8, 11, 8, 9, 11
},
        {
    0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11
},
        {
    11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0
},
        {
    11, 6, 7, 11, 7, 1, 1, 7, 3
},
        {
    1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7
},
        {
    2, 6, 7, 2, 7, 3, 0, 9, 1
},
        {
    7, 8, 0, 7, 0, 6, 6, 0, 2
},
        {
    7, 3, 2, 6, 7, 2
},
        {
    2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7
},
        {
    2, 0, 9, 2, 9, 11, 6, 7, 10
},
        {
    1, 11, 2, 3, 8, 0, 6, 7, 10
},
        {
    11, 2, 1, 6, 7, 10
},
        {
    8, 9, 1, 8, 1, 3, 10, 6, 7
},
        {
    0, 9, 1, 10, 6, 7
},
        {
    3, 8, 0, 10, 6, 7
},
        {
    7, 10, 6
},
        {
    7, 6, 10
},
        {
    3, 0, 8, 10, 7, 6
},
        {
    0, 1, 9, 10, 7, 6
},
        {
    8, 1, 9, 8, 3, 1, 10, 7, 6
},
        {
    11, 1, 2, 6, 10, 7
},
        {
    1, 2, 11, 3, 0, 8, 6, 10, 7
},
        {
    2, 9, 0, 2, 11, 9, 6, 10, 7
},
        {
    2, 10, 3, 11, 8, 6, 11, 9, 8, 8, 7, 6
},
        {
    7, 2, 3, 6, 2, 7
},
        {
    7, 0, 8, 7, 6, 0, 6, 2, 0
},
        {
    2, 7, 6, 2, 3, 7, 0, 1, 9
},
        {
    1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6
},
        {
    11, 7, 6, 11, 1, 7, 1, 3, 7
},
        {
    11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8
},
        {
    0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7
},
        {
    7, 6, 11, 7, 11, 8, 8, 11, 9
},
        {
    6, 8, 4, 10, 8, 6
},
        {
    3, 6, 10, 3, 0, 6, 0, 4, 6
},
        {
    8, 6, 10, 8, 4, 6, 9, 0, 1
},
        {
    9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6
},
        {
    6, 8, 4, 6, 10, 8, 2, 11, 1
},
        {
    3, 2, 10, 0, 6, 1, 0, 4, 6, 6, 11, 1
},
        {
    0, 2, 8, 2, 10, 8, 4, 11, 9, 4, 6, 11
},
        {
    11, 9, 4, 11, 4, 6, 10, 3, 2
},
        {
    8, 2, 3, 8, 4, 2, 4, 6, 2
},
        {
    0, 4, 2, 4, 6, 2
},
        {
    3, 8, 0, 1, 9, 2, 2, 9, 4, 2, 4, 6
},
        {
    1, 9, 4, 1, 4, 2, 2, 4, 6
},
        {
    8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1
},
        {
    11, 1, 0, 11, 0, 6, 6, 0, 4
},
        {
    4, 6, 11, 4, 11, 9, 0, 3, 8
},
        {
    11, 9, 4, 6, 11, 4
},
        {
    4, 9, 5, 7, 6, 10
},
        {
    0, 8, 3, 4, 9, 5, 10, 7, 6
},
        {
    5, 0, 1, 5, 4, 0, 7, 6, 10
},
        {
    8, 7, 4, 3, 5, 10, 3, 1, 5, 5, 6, 10
},
        {
    9, 5, 4, 11, 1, 2, 7, 6, 10
},
        {
    0, 9, 1, 4, 8, 7, 2, 10, 3, 5, 6, 11
},
        {
    5, 6, 11, 4, 2, 7, 4, 0, 2, 2, 10, 7
},
        {
    3, 2, 10, 7, 4, 8, 11, 5, 6
},
        {
    7, 2, 3, 7, 6, 2, 5, 4, 9
},
        {
    8, 7, 4, 9, 5, 0, 0, 5, 6, 0, 6, 2
},
        {
    1, 5, 2, 5, 6, 2, 3, 4, 0, 3, 7, 4
},
        {
    6, 2, 1, 6, 1, 5, 4, 8, 7
},
        {
    11, 5, 6, 1, 7, 9, 1, 3, 7, 7, 4, 9
},
        {
    1, 0, 9, 5, 6, 11, 8, 7, 4
},
        {
    4, 0, 3, 4, 3, 7, 6, 11, 5
},
        {
    5, 6, 11, 4, 8, 7
},
        {
    6, 9, 5, 6, 10, 9, 10, 8, 9
},
        {
    3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5
},
        {
    0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10
},
        {
    6, 10, 3, 6, 3, 5, 5, 3, 1
},
        {
    5, 6, 11, 1, 2, 9, 9, 2, 10, 9, 10, 8
},
        {
    0, 9, 1, 2, 10, 3, 5, 6, 11
},
        {
    10, 8, 0, 10, 0, 2, 11, 5, 6
},
        {
    2, 10, 3, 11, 5, 6
},
        {
    5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2
},
        {
    9, 5, 6, 9, 6, 0, 0, 6, 2
},
        {
    1, 5, 6, 1, 6, 2, 3, 8, 0
},
        {
    1, 5, 6, 2, 1, 6
},
        {
    1, 3, 8, 1, 8, 9, 5, 6, 11
},
        {
    9, 1, 0, 5, 6, 11
},
        {
    0, 3, 8, 5, 6, 11
},
        {
    11, 5, 6
},
        {
    10, 5, 11, 7, 5, 10
},
        {
    10, 5, 11, 10, 7, 5, 8, 3, 0
},
        {
    5, 10, 7, 5, 11, 10, 1, 9, 0
},
        {
    9, 8, 5, 8, 7, 5, 11, 3, 1, 11, 10, 3
},
        {
    10, 1, 2, 10, 7, 1, 7, 5, 1
},
        {
    2, 10, 3, 0, 8, 1, 1, 8, 7, 1, 7, 5
},
        {
    9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7
},
        {
    7, 5, 9, 7, 9, 8, 3, 2, 10
},
        {
    2, 5, 11, 2, 3, 5, 3, 7, 5
},
        {
    8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5
},
        {
    11, 2, 1, 9, 0, 5, 5, 0, 3, 5, 3, 7
},
        {
    9, 8, 7, 9, 7, 5, 11, 2, 1
},
        {
    1, 3, 5, 3, 7, 5
},
        {
    0, 8, 7, 0, 7, 1, 1, 7, 5
},
        {
    9, 0, 3, 9, 3, 5, 5, 3, 7
},
        {
    9, 8, 7, 5, 9, 7
},
        {
    5, 8, 4, 5, 11, 8, 11, 10, 8
},
        {
    5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0
},
        {
    4, 5, 9, 0, 1, 8, 8, 1, 11, 8, 11, 10
},
        {
    11, 10, 3, 11, 3, 1, 9, 4, 5
},
        {
    2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8
},
        {
    0, 4, 5, 0, 5, 1, 2, 10, 3
},
        {
    0, 2, 10, 0, 10, 8, 4, 5, 9
},
        {
    9, 4, 5, 2, 10, 3
},
        {
    2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4
},
        {
    5, 11, 2, 5, 2, 4, 4, 2, 0
},
        {
    3, 8, 0, 1, 11, 2, 4, 5, 9
},
        {
    1, 11, 2, 9, 4, 5
},
        {
    8, 4, 5, 8, 5, 3, 3, 5, 1
},
        {
    0, 4, 5, 1, 0, 5
},
        {
    9, 4, 5, 0, 3, 8
},
        {
    9, 4, 5
},
        {
    4, 10, 7, 4, 9, 10, 9, 11, 10
},
        {
    4, 8, 7, 9, 10, 0, 9, 11, 10, 10, 3, 0
},
        {
    1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10
},
        {
    3, 1, 11, 3, 11, 10, 7, 4, 8
},
        {
    4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2
},
        {
    9, 1, 0, 8, 7, 4, 2, 10, 3
},
        {
    10, 7, 4, 10, 4, 2, 2, 4, 0
},
        {
    8, 7, 4, 3, 2, 10
},
        {
    2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9
},
        {
    9, 11, 2, 9, 2, 0, 8, 7, 4
},
        {
    3, 7, 4, 3, 4, 0, 1, 11, 2
},
        {
    1, 11, 2, 8, 7, 4
},
        {
    4, 9, 1, 4, 1, 7, 7, 1, 3
},
        {
    0, 9, 1, 8, 7, 4
},
        {
    4, 0, 3, 7, 4, 3
},
        {
    4, 8, 7
},
        {
    9, 11, 8, 11, 10, 8
},
        {
    3, 0, 9, 3, 9, 10, 10, 9, 11
},
        {
    0, 1, 11, 0, 11, 8, 8, 11, 10
},
        {
    3, 1, 11, 10, 3, 11
},
        {
    1, 2, 10, 1, 10, 9, 9, 10, 8
},
        {
    1, 0, 9, 2, 10, 3
},
        {
    0, 2, 10, 8, 0, 10
},
        {
    3, 2, 10
},
        {
    2, 3, 8, 2, 8, 11, 11, 8, 9
},
        {
    9, 11, 2, 0, 9, 2
},
        {
    0, 3, 8, 1, 11, 2
},
        {
    1, 11, 2
},
        {
    1, 3, 8, 9, 1, 8
},
        {
    0, 9, 1
},
        {
    0, 3, 8
},
        {}
    };

    public static void fill(Point3f p, int vi) {
        switch (vi) {
            case 0:
                p.set(0, 0, 0);
                break;
            case 1:
                p.set(1, 0, 0);
                break;
            case 2:
                p.set(1, 1, 0);
                break;
            case 3:
                p.set(0, 1, 0);
                break;
            case 4:
                p.set(0, 0, 1);
                break;
            case 5:
                p.set(1, 0, 1);
                break;
            case 6:
                p.set(1, 1, 1);
                break;
            case 7:
                p.set(0, 1, 1);
                break;
        }
    }

    public static final int getCube(double[] vs,
            double threshLow, double threshHigh) {
        return MarchingCubes.getCube(vs[0], vs[1], vs[2], vs[3], vs[4], vs[5], vs[6], vs[7], threshLow, threshHigh);
    }

    /**
     * Generate areas, directions and simple from triTableA and edges.
     * @param args
     */
    public static void main(String[] args) {
        int[][] dir = new int[256][12];
        boolean[] simple = new boolean[256];

        int[] cube = new int[8];

        // determine simple cases
        // it is simple if the number of corners outside (or inside) + 2 <= unique
        // edges
        // case 1
        for (int i = 0; i < 256; i++) {
            int numV = Integer.bitCount(i);
            if (numV > 4) {
                numV = -(numV - 8);
            }
            Set<Integer> vert = new HashSet<Integer>();
            for (int f : triTableA[i]) {
                vert.add(f);
            }
            simple[i] = vert.size() - 2 <= numV;
        }

        // make the directional table
        for (int v0 = 0; v0 <= 1; v0++) {
            for (int v1 = 0; v1 <= 1; v1++) {
                for (int v2 = 0; v2 <= 1; v2++) {
                    for (int v3 = 0; v3 <= 1; v3++) {
                        for (int v4 = 0; v4 <= 1; v4++) {
                            for (int v5 = 0; v5 <= 1; v5++) {
                                for (int v6 = 0; v6 <= 1; v6++) {
                                    for (int v7 = 0; v7 <= 1; v7++) {
                                        int[] v = new int[]{v0, v1, v2, v3, v4, v5, v6, v7};
                                        int c = MarchingCubes.getCube(v0, v1, v2, v3, v4, v5, v6, v7, .5, 5);
                                        char[] faces = triTableA[c];
                                        for (char f : faces) {
                                            dir[c][f] = v[EDGES[f][0]] - v[EDGES[f][1]];
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // now compute area based on the assumption we are cutting at .5
        double[] area = new double[256];
        Point3f[] corners = {
            new Point3f(0, 0, 0),
            new Point3f(1, 0, 0),
            new Point3f(1, 1, 0),
            new Point3f(0, 1, 0),
            new Point3f(0, 0, 1),
            new Point3f(1, 0, 1),
            new Point3f(1, 1, 1),
            new Point3f(0, 1, 1),
        };
        for (int i = 0; i < 256; i++) {
            Point3f[] ps = new Point3f[3];
            double a = 0;
            int v = 0;
            for (int face : triTableA[i]) {
                // find the edges
                Point3f p = new Point3f();
                p.add(corners[EDGES[face][1]], corners[EDGES[face][0]]);
                p.scale(.5f);
                ps[v] = p;
                v++;
                if (v == 3) {
                    // compute the area of this triangle
                    Vector3f ab = new Vector3f();
                    ab.sub(ps[0], ps[1]);
                    Vector3f ac = new Vector3f();
                    ac.sub(ps[0], ps[2]);

                    double myA = ab.lengthSquared() * ac.lengthSquared() - ab.dot(ac) * ab.dot(ac);
                    myA = Math.sqrt(myA) / 2;
                    a += myA;
                    v = 0;
                }
            }
            area[i] = a;
        }



        // write dir, area and simple
        try {
            FileWriter out = new FileWriter("/Users/eider/Desktop/outmc.txt");
            out.write("SIMPLE = ");
            out.write(Arrays.toString(simple));
            out.write("\n");
            out.write("AREAS = ");
            out.write(Arrays.toString(area));
            out.write("\n");
            out.write("DIRECTIONS = {");
            for (int[] in : dir) {
                out.write(Arrays.toString(in));
                out.write(",\n");
            }
            out.write("}\n");
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
